// Global state
let currentScreen = 'splash-screen';
let previousScreen = null;
let isRecording = false;
let selectedMood = null;
let chatMessages = [];

// Analysis topics configuration
const analysisTopics = {
    relationships: {
        title: '–ê–Ω–∞–ª–∏–∑ –æ—Ç–Ω–æ—à–µ–Ω–∏–π',
        prompt: '–°–µ–π—á–∞—Å –º—ã –Ω–∞–µ–¥–∏–Ω–µ —Å —Ç–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏. –Ø –∑–∞–¥–∞–º —Ç–µ–±–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤, –æ—Ç–≤–µ—á–∞–π –æ—Ç–∫—Ä—ã—Ç–æ –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ. –ü–æ –∏—Ç–æ–≥—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ª—É—á—à–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ç–≤–æ–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö —Å –ª—é–¥—å–º–∏. ü´Ç\n\n<b>–ü–∏—à–∏ "–ì–æ—Ç–æ–≤!"</b>',
        color: '#4A90E2'
    },
    money: {
        title: '–ê–Ω–∞–ª–∏–∑ –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –¥–µ–Ω—å–≥–∞–º–∏',
        prompt: '–°–µ–π—á–∞—Å –º—ã –Ω–∞–µ–¥–∏–Ω–µ —Å —Ç–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏. –Ø –∑–∞–¥–∞–º 10 –≤–æ–ø—Ä–æ—Å–æ–≤, –æ—Ç–≤–µ—á–∞–π –æ—Ç–∫—Ä—ã—Ç–æ –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ. –í –∫–æ–Ω—Ü–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ª—É—á—à–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ç–≤–æ–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö —Å –¥–µ–Ω—å–≥–∞–º–∏. üí∏\n\n<b>–ü–∏—à–∏ "–ì–æ—Ç–æ–≤!"</b>',
        color: '#66BB6A'
    },
    confidence: {
        title: '–ê–Ω–∞–ª–∏–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏',
        prompt: '–°–µ–π—á–∞—Å –º—ã –Ω–∞–µ–¥–∏–Ω–µ —Å —Ç–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏. –Ø –∑–∞–¥–∞–º 10 –≤–æ–ø—Ä–æ—Å–æ–≤, –æ—Ç–≤–µ—á–∞–π –æ—Ç–∫—Ä—ã—Ç–æ –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ. –í –∫–æ–Ω—Ü–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è –ø–æ–º–æ–≥—É –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–µ–±—è –∏ –æ–±—Ä–µ—Å—Ç–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å. üòé\n\n<b>–ü–∏—à–∏ "–ì–æ—Ç–æ–≤!"</b>',
        color: '#FFA726'
    },
    fears: {
        title: '–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ö–æ–≤',
        prompt: '–°–µ–π—á–∞—Å –º—ã –Ω–∞–µ–¥–∏–Ω–µ —Å —Ç–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏. –Ø –∑–∞–¥–∞–º 10 –≤–æ–ø—Ä–æ—Å–æ–≤, –æ—Ç–≤–µ—á–∞–π –æ—Ç–∫—Ä—ã—Ç–æ –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ. –í–º–µ—Å—Ç–µ –º—ã –≤—ã—è—Å–Ω–∏–º —Ç–≤–æ–∏ –∏—Å—Ç–∏–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ö–∏ –∏ —è –Ω–∞—É—á—É —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å—é. ü¶æ\n\n<b>–ü–∏—à–∏ "–ì–æ—Ç–æ–≤!"</b>',
        color: '#EF5350'
    }
};
let currentAnalysisTopic = null;

// Initialize Telegram WebApp
if (window.Telegram && window.Telegram.WebApp) {
    window.Telegram.WebApp.ready();
    window.Telegram.WebApp.expand();
    window.Telegram.WebApp.setHeaderColor('#E3F2FD');
    window.Telegram.WebApp.setBackgroundColor('#E3F2FD');
}

// Initialize app
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
    setupEventListeners();
    drawMoodChart();
});

function initializeApp() {
    // Load Telegram avatar on startup
    loadTelegramAvatar();

    // Show splash screen for 3 seconds then go to onboarding
    setTimeout(() => {
        showScreen('onboarding-screen');
    }, 3000);
}

function setupEventListeners() {
    // Add touch feedback and animations
    document.querySelectorAll('button, .mood-btn, .option-card, .practice-card, .nav-item, .day-item, .history-item').forEach(element => {
        element.addEventListener('click', addRippleEffect);

        element.addEventListener('touchstart', function() {
            this.style.transform = this.style.transform.includes('scale') ?
                this.style.transform.replace(/scale\([^)]*\)/, 'scale(0.95)') :
                this.style.transform + ' scale(0.95)';
        });

        element.addEventListener('touchend', function() {
            setTimeout(() => {
                this.style.transform = this.style.transform.replace(/scale\([^)]*\)/, '');
            }, 150);
        });
    });

    // Chat input handling
    const chatInput = document.getElementById('chatInput');
    if (chatInput) {
        chatInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendChatMessage();
            }
        });
    }

    // Analysis input handling
    const analysisInput = document.getElementById('analysisInput');
    if (analysisInput) {
        analysisInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendAnalysisMessage();
            }
        });
    }

    // Dreams input handling
    const dreamsInput = document.getElementById('dreamsInput');
    if (dreamsInput) {
        dreamsInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendDreamsMessage();
            }
        });
    }

    // Voice recording button long press
    const voiceButtons = document.querySelectorAll('.voice-btn, .voice-record-btn');
    voiceButtons.forEach(btn => {
        let pressTimer;

        btn.addEventListener('touchstart', function(e) {
            e.preventDefault();
            pressTimer = setTimeout(() => {
                startVoiceRecording();
            }, 200);
        });

        btn.addEventListener('touchend', function(e) {
            e.preventDefault();
            clearTimeout(pressTimer);
            if (isRecording) {
                stopVoiceRecording();
            }
        });
    });
}

function addRippleEffect(e) {
    const button = e.currentTarget;
    const ripple = document.createElement('span');
    const rect = button.getBoundingClientRect();
    const size = Math.max(rect.width, rect.height);
    const x = e.clientX - rect.left - size / 2;
    const y = e.clientY - rect.top - size / 2;

    ripple.style.cssText = `
        position: absolute;
        width: ${size}px;
        height: ${size}px;
        left: ${x}px;
        top: ${y}px;
        background: rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        transform: scale(0);
        animation: ripple-animation 0.6s ease-out;
        pointer-events: none;
        z-index: 100;
    `;

    button.style.position = 'relative';
    button.style.overflow = 'hidden';
    button.appendChild(ripple);

    setTimeout(() => {
        ripple.remove();
    }, 600);
}

// Add ripple animation keyframes
const style = document.createElement('style');
style.textContent = `
    @keyframes ripple-animation {
        to {
            transform: scale(2);
            opacity: 0;
        }
    }
`;
document.head.appendChild(style);

// Screen navigation with smooth transitions
function showScreen(screenId) {
    const currentScreenEl = document.querySelector('.screen.active');
    const targetScreenEl = document.getElementById(screenId);

    if (!targetScreenEl) return;

    // Hide current screen
    if (currentScreenEl) {
        currentScreenEl.classList.remove('active');
    }

    // Show target screen with animation
    setTimeout(() => {
        targetScreenEl.classList.add('active');
        currentScreen = screenId;

        // Update navigation state
        updateNavigation(screenId);

        // Trigger screen-specific initializations
        onScreenShow(screenId);
    }, 100);
}

function updateNavigation(screenId) {
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
    });

    // Map screens to navigation items
    const navMapping = {
        'main-screen': 0,
        'daily-plan-screen': 0,
        'voice-chat-screen': 1,
        'practices-screen': 2,
        'practice-player-screen': 2,
        'profile-screen': 3
    };

    const navIndex = navMapping[screenId];
    if (navIndex !== undefined) {
        const navItems = document.querySelectorAll('.nav-item');
        if (navItems[navIndex]) {
            navItems[navIndex].classList.add('active');
        }
    }
}

function onScreenShow(screenId) {
    switch(screenId) {
        case 'main-screen':
            drawMoodChart();
            break;
        case 'practice-player-screen':
            startBreathingAnimation();
            break;
        case 'voice-assistant-screen':
            startOrbAnimation();
            break;
    }
}

// Update navigation active states
function updateNavigation(activeScreen) {
    // Remove active class from all nav items
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
    });

    // Add active class to current nav item based on screen
    let activeNavSelector = '';
    switch(activeScreen) {
        case 'main-screen':
            activeNavSelector = '.nav-item[onclick="showMainScreen()"]';
            break;
        case 'voice-chat-screen':
            activeNavSelector = '.nav-item[onclick="showVoiceChat()"]';
            break;
        case 'practices-screen':
            activeNavSelector = '.nav-item[onclick="showPractices()"]';
            break;
        case 'profile-screen':
            activeNavSelector = '.nav-item[onclick="showProfile()"]';
            break;
    }

    if (activeNavSelector) {
        document.querySelectorAll(activeNavSelector).forEach(item => {
            item.classList.add('active');
        });
    }
}

// Main navigation functions
function showMainScreen() {
    showScreen('main-screen');
    updateNavigation('main-screen');
}

function showVoiceChat() {
    console.log('showVoiceChat called - showing agent selection screen');
    showScreen('voice-chat-screen');
    updateNavigation('voice-chat-screen');
}


function showPractices() {
    showScreen('practices-screen');
    updateNavigation('practices-screen');
}

function showProfile() {
    showScreen('profile-screen');
    updateNavigation('profile-screen');
    loadTelegramAvatar();
}

function loadTelegramAvatar() {
    if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe && window.Telegram.WebApp.initDataUnsafe.user) {
        const user = window.Telegram.WebApp.initDataUnsafe.user;
        if (user.photo_url) {
            const img = document.getElementById('profile-avatar-img');
            const placeholder = document.getElementById('profile-avatar-placeholder');
            if (img && placeholder) {
                img.src = user.photo_url;
                img.style.display = 'block';
                placeholder.style.display = 'none';
            }
        }
    }
}

function showHelp() {
    alert('–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
}

function showSupport() {
    alert('–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Soul Near –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
}

function showChat() {
    showScreen('chat-screen');
}

function showVoiceChat() {
    showScreen('voice-chat-screen');
}

function showChatHistory() {
    previousScreen = currentScreen;
    showScreen('chat-history-screen');
}

function showDailyPlan() {
    showScreen('daily-plan-screen');
}

function showDreamAnalysis() {
    showScreen('chat-screen');
    setTimeout(() => {
        addChatMessage("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ –æ —Å–≤–æ–µ–º —Å–Ω–µ, –∏ —è –ø–æ–º–æ–≥—É –µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", 'assistant');
    }, 500);
}

function showPersonalityAnalysis() {
    showScreen('chat-screen');
    setTimeout(() => {
        addChatMessage("–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–º –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Å–µ–±–µ", 'assistant');
    }, 500);
}

// Mood selection
function selectMood(mood) {
    selectedMood = mood;

    // Update mood buttons visual feedback
    document.querySelectorAll('.mood-btn').forEach(btn => {
        btn.classList.remove('selected');
    });

    // Find and highlight selected mood button
    const selectedBtn = document.querySelector(`[data-mood="${mood}"]`);
    if (selectedBtn) {
        selectedBtn.classList.add('selected');
    }

    // Send mood data to Telegram WebApp
    if (window.Telegram && window.Telegram.WebApp) {
        window.Telegram.WebApp.sendData(JSON.stringify({
            action: 'mood_selected',
            mood: mood,
            timestamp: new Date().toISOString()
        }));
    }

    showMoodFeedback(mood);
}

function showMoodFeedback(mood) {
    const feedback = document.createElement('div');
    feedback.textContent = `–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ${mood} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!`;
    feedback.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(21, 101, 192, 0.9);
        color: white;
        padding: 15px 30px;
        border-radius: 25px;
        z-index: 1000;
        animation: fadeInOut 2s ease-in-out;
        backdrop-filter: blur(10px);
    `;

    document.body.appendChild(feedback);

    setTimeout(() => {
        feedback.remove();
    }, 2000);
}

// Calendar functionality
function selectDay(dayNumber) {
    // Update active day
    document.querySelectorAll('.day-item').forEach(day => {
        day.classList.remove('active');
    });

    event.target.closest('.day-item').classList.add('active');

    // Show daily plan for selected day
    setTimeout(() => {
        showDailyPlan();
    }, 300);
}

// Chat functionality
async function sendChatMessage() {
    const input = document.getElementById('chatInput');
    const message = input.value.trim();

    if (message) {
        addChatMessage(message, 'user');
        input.value = '';

        // Show typing indicator
        const typingIndicator = addChatMessage('–ü–µ—á–∞—Ç–∞–µ—Ç...', 'assistant');
        typingIndicator.classList.add('typing-indicator');

        try {
            // Get user ID from Telegram
            let userId = 'anonymous';
            if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe) {
                const user = window.Telegram.WebApp.initDataUnsafe.user;
                if (user && user.id) {
                    userId = user.id;
                }
            }

            // Send to API
            const response = await fetch('/api/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    user_id: userId,
                    message: message,
                    assistant_type: currentAssistantType || 'helper'
                })
            });

            // Remove typing indicator
            typingIndicator.remove();

            if (response.ok) {
                const data = await response.json();
                addChatMessage(data.response, 'assistant');
            } else {
                addChatMessage('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'assistant');
            }
        } catch (error) {
            console.error('Error sending message:', error);
            typingIndicator.remove();
            addChatMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.', 'assistant');
        }
    }
}

function addChatMessage(message, type) {
    const messagesContainer = document.getElementById('chatMessages');
    if (!messagesContainer) return null;

    const messageElement = document.createElement('div');
    messageElement.className = `message ${type}`;

    const contentElement = document.createElement('div');
    contentElement.className = 'message-content';

    if (type === 'assistant' && message.includes('\n')) {
        // Handle multi-line messages
        const paragraphs = message.split('\n').filter(p => p.trim());
        paragraphs.forEach(paragraph => {
            const p = document.createElement('p');
            p.textContent = paragraph;
            contentElement.appendChild(p);
        });
    } else {
        const p = document.createElement('p');
        p.textContent = message;
        contentElement.appendChild(p);
    }

    messageElement.appendChild(contentElement);
    messagesContainer.appendChild(messageElement);

    // Scroll to bottom
    messagesContainer.scrollTop = messagesContainer.scrollHeight;

    return messageElement;

    // Add fade-in animation
    messageElement.classList.add('fade-in');
}

// Track current assistant type
let currentAssistantType = 'helper';

// Voice functionality
function startVoiceRecording() {
    if (isRecording) return;

    isRecording = true;

    // Update UI
    const voiceButtons = document.querySelectorAll('.voice-btn, .voice-record-btn');
    voiceButtons.forEach(btn => {
        btn.classList.add('recording');
    });

    // Show recording animation
    showRecordingAnimation();

    // Haptic feedback
    if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.HapticFeedback) {
        window.Telegram.WebApp.HapticFeedback.impactOccurred('light');
    }

    console.log('Voice recording started...');
}

function stopVoiceRecording() {
    if (!isRecording) return;

    isRecording = false;

    // Update UI
    const voiceButtons = document.querySelectorAll('.voice-btn, .voice-record-btn');
    voiceButtons.forEach(btn => {
        btn.classList.remove('recording');
    });

    // Hide recording animation
    hideRecordingAnimation();

    // Send voice data to Telegram WebApp
    if (window.Telegram && window.Telegram.WebApp) {
        window.Telegram.WebApp.sendData(JSON.stringify({
            action: 'voice_message',
            duration: Math.floor(Math.random() * 10) + 1, // Simulate duration
            timestamp: new Date().toISOString()
        }));
    }

    // Simulate voice message processing
    setTimeout(() => {
        if (currentScreen === 'chat-screen') {
            addChatMessage("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", 'user');
            setTimeout(() => {
                simulateAssistantResponse("voice");
            }, 500);
        }
    }, 1000);

    console.log('Voice recording stopped...');
}

function showRecordingAnimation() {
    const recordingElements = document.querySelectorAll('.orb-gradient, .voice-orb, .assistant-orb .orb-gradient');
    recordingElements.forEach(element => {
        element.classList.add('recording');
    });

    const waveElements = document.querySelectorAll('.recording-bar, .wave-bar');
    waveElements.forEach(element => {
        element.style.animationPlayState = 'running';
    });
}

function hideRecordingAnimation() {
    const recordingElements = document.querySelectorAll('.orb-gradient, .voice-orb, .assistant-orb .orb-gradient');
    recordingElements.forEach(element => {
        element.classList.remove('recording');
    });
}

// Practice functionality
function playPractice(practiceId) {
    // Send practice data to Telegram WebApp
    if (window.Telegram && window.Telegram.WebApp) {
        window.Telegram.WebApp.sendData(JSON.stringify({
            action: 'practice_started',
            practice_id: practiceId || 'breathing',
            timestamp: new Date().toISOString()
        }));
    }

    showScreen('practice-player-screen');
}

function startBreathingAnimation() {
    const breathingText = document.querySelector('.breathing-text');
    if (breathingText) {
        let isInhale = true;
        const breathingInterval = setInterval(() => {
            if (currentScreen !== 'practice-player-screen') {
                clearInterval(breathingInterval);
                return;
            }

            breathingText.textContent = isInhale ? '–í–¥–æ—Ö' : '–í—ã–¥–æ—Ö';
            isInhale = !isInhale;
        }, 2000);
    }
}

function startOrbAnimation() {
    const orbs = document.querySelectorAll('.assistant-orb .orb-gradient');
    orbs.forEach(orb => {
        orb.classList.add('animated');
    });
}

// Mood chart drawing
function drawMoodChart() {
    const canvas = document.getElementById('moodChart');
    if (!canvas) return;

    const ctx = canvas.getContext('2d');

    // Set canvas size
    const rect = canvas.getBoundingClientRect();
    canvas.width = rect.width * window.devicePixelRatio;
    canvas.height = rect.height * window.devicePixelRatio;
    ctx.scale(window.devicePixelRatio, window.devicePixelRatio);

    const width = rect.width;
    const height = rect.height;

    // Clear canvas
    ctx.clearRect(0, 0, width, height);

    // Sample mood data
    const moodData = [
        { time: '21.04', value: 0.3 },
        { time: '22.04', value: 0.5 },
        { time: '23.04', value: 0.4 },
        { time: '24.04', value: 0.6 },
        { time: '25.04', value: 0.8 },
        { time: '26.04', value: 0.7 },
        { time: '27.04', value: 0.9 },
        { time: '28.04', value: 0.8 },
        { time: '29.04', value: 0.6 },
        { time: '30.04', value: 0.7 }
    ];

    // Draw grid
    ctx.strokeStyle = '#E3F2FD';
    ctx.lineWidth = 1;

    // Vertical lines
    for (let i = 0; i <= 10; i++) {
        const x = (width / 10) * i;
        ctx.beginPath();
        ctx.moveTo(x, 0);
        ctx.lineTo(x, height);
        ctx.stroke();
            /* AXIS LABELS */
            ctx.fillStyle = "#1565C0";
            ctx.font = "12px system-ui, -apple-system, Segoe UI, Roboto, Arial";
            ctx.textAlign = "center";
            ctx.textBaseline = "bottom";
            for (let i = 0; i < moodData.length; i++) {
                const x = (width / (moodData.length - 1)) * i;
                const label = moodData[i].time;
                ctx.fillText(label, x, height - 4);
            }
    }

    // Horizontal lines
    for (let i = 0; i <= 5; i++) {
        const y = (height / 5) * i;
        ctx.beginPath();
        ctx.moveTo(0, y);
        ctx.lineTo(width, y);
        ctx.stroke();
    }

    // Draw mood line with smoothing
    const points = moodData.map((p, i) => ({ x: (width / (moodData.length - 1)) * i, y: height - (p.value * height) }));

    ctx.strokeStyle = "#1976D2";
    ctx.lineWidth = 2;
    ctx.lineJoin = "round";
    ctx.lineCap = "round";
    ctx.beginPath();

    if (points.length) {
        ctx.moveTo(points[0].x, points[0].y);
        for (let i = 1; i < points.length - 1; i++) {
            const xc = (points[i].x + points[i + 1].x) / 2;
            const yc = (points[i].y + points[i + 1].y) / 2;
            ctx.quadraticCurveTo(points[i].x, points[i].y, xc, yc);
        }
        const last = points[points.length - 1];
        ctx.quadraticCurveTo(points[points.length - 1].x, points[points.length - 1].y, last.x, last.y);
        ctx.stroke();
    }

    // No data points - just clean line
}

// Practice filters
function filterPractices(filter) {
    // Update filter buttons
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.classList.remove('active');
    });

    // Find the button element (event.target might be SVG or other child element)
    let targetButton = event.target;
    while (targetButton && !targetButton.classList.contains('filter-btn')) {
        targetButton = targetButton.parentElement;
    }

    if (targetButton) {
        targetButton.classList.add('active');
    }

    // Send filter data to Telegram WebApp
    if (window.Telegram && window.Telegram.WebApp) {
        window.Telegram.WebApp.sendData(JSON.stringify({
            action: 'practice_filter',
            filter: filter,
            timestamp: new Date().toISOString()
        }));
    }

    console.log('Filter selected:', filter);
}

// Utility functions
function vibrate(pattern = [100]) {
    if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.HapticFeedback) {
        window.Telegram.WebApp.HapticFeedback.impactOccurred('light');
    } else if ('vibrate' in navigator) {
        navigator.vibrate(pattern);
    }
}

function showNotification(message, type = 'info') {
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ª—É—á—à–µ–≥–æ UX
    console.log(`Notification (${type}):`, message);
    return; // –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–ª–∞–Ω–∞ –Ω–∞ –¥–µ–Ω—å
function selectPlanItem(button) {
    // –£–±–∏—Ä–∞–µ–º active –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –≤ —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    const allButtons = button.parentElement.querySelectorAll('.plan-item');
    allButtons.forEach(btn => {
        btn.classList.remove('active');
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        btn.style.background = '#FFFFFF';
        btn.style.color = '#2E6BEB';
    });

    // –î–æ–±–∞–≤–ª—è–µ–º active –∫–ª–∞—Å—Å –∫ —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–µ
    button.classList.add('active');
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    button.style.background = '#2E6BEB';
    button.style.color = 'white';

    console.log('Selected plan item:', button.textContent);
}

// Performance optimization
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// Resize handler with debouncing
const handleResize = debounce(() => {
    drawMoodChart();
}, 250);

window.addEventListener('resize', handleResize);

// Error handling –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ª—É—á—à–µ–≥–æ UX
// window.addEventListener('error', function(e) {
//     console.error('JavaScript error:', e.error);
// });

// Export functions to global scope for direct access
window.showScreen = showScreen;
window.showMainScreen = showMainScreen;
window.showPractices = showPractices;
window.showProfile = showProfile;
window.showVoiceChat = showVoiceChat;
window.toggleVoiceRecording = toggleVoiceRecording;
window.filterPractices = filterPractices;
window.toggleFavorite = toggleFavorite;
// Preview video functions
function playVideo() {
    console.log('Playing video preview...');
    // Here you would implement video playback logic
}

function handlePriceClick() {
    console.log('Price button clicked');
    // Here you would implement price/payment logic
}

window.playMeditation = playMeditation;
window.playVideo = playVideo;
window.handlePriceClick = handlePriceClick;
window.selectPlanItem = selectPlanItem;
window.setMood = setMood;
window.goToHistory = goToHistory;
window.sendChatMessage = sendChatMessage;

// Export functions for potential module usage
window.SoulNearApp = {
    showScreen,
    selectMood,
    sendChatMessage,
    startVoiceRecording,
    stopVoiceRecording,
    playPractice,
    filterPractices,
    toggleFavorite,
    playMeditation,
    selectPlanItem,
    vibrate,
    showNotification
};
// twemoji parse on load - only for main screen badges
document.addEventListener("DOMContentLoaded", function(){
  if (window.twemoji) {
    // –¢–æ–ª—å–∫–æ –¥–ª—è –∑–Ω–∞—á–∫–æ–≤ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
    const calendarBadges = document.querySelectorAll('.day-badge');
    calendarBadges.forEach(badge => {
      window.twemoji.parse(badge, {folder: "svg", ext: ".svg"});
    });
  }
});

// UI 2025-09-18: override drawMoodChart with smoothing
function drawMoodChart() {
    const canvas = document.getElementById("moodChart");
    if (!canvas) return;

    const ctx = canvas.getContext("2d");

    // Set canvas size
    const rect = canvas.getBoundingClientRect();
    canvas.width = rect.width * window.devicePixelRatio;
    canvas.height = rect.height * window.devicePixelRatio;
    ctx.setTransform(1,0,0,1,0,0);
    ctx.scale(window.devicePixelRatio, window.devicePixelRatio);

    const width = rect.width;
    const height = rect.height;

    // Clear canvas
    ctx.clearRect(0, 0, width, height);

    // Sample mood data
    const moodData = [
        { time: 21.04, value: 0.3 },
        { time: 22.04, value: 0.5 },
        { time: 23.04, value: 0.4 },
        { time: 24.04, value: 0.6 },
        { time: 25.04, value: 0.8 },
        { time: 26.04, value: 0.7 },
        { time: 27.04, value: 0.9 },
        { time: 28.04, value: 0.8 },
        { time: 29.04, value: 0.6 },
        { time: 30.04, value: 0.7 }
    ];

    // Grid
    ctx.strokeStyle = "#E3F2FD";
    ctx.lineWidth = 1;
    for (let i = 0; i <= 10; i++) {
        const x = (width / 10) * i;
        ctx.beginPath(); ctx.moveTo(x, 0); ctx.lineTo(x, height); ctx.stroke();
    }
    for (let i = 0; i <= 5; i++) {
        const y = (height / 5) * i;
        ctx.beginPath(); ctx.moveTo(0, y); ctx.lineTo(width, y); ctx.stroke();
    }

    // Smooth line
    const points = moodData.map((p, i) => ({ x: (width / (moodData.length - 1)) * i, y: height - (p.value * height) }));
    ctx.strokeStyle = "#1976D2";
    ctx.lineWidth = 2;
    ctx.lineJoin = "round";
    ctx.lineCap = "round";
    ctx.beginPath();
    if (points.length) {
        ctx.moveTo(points[0].x, points[0].y);
        for (let i = 1; i < points.length - 1; i++) {
            const xc = (points[i].x + points[i + 1].x) / 2;
            const yc = (points[i].y + points[i + 1].y) / 2;
            ctx.quadraticCurveTo(points[i].x, points[i].y, xc, yc);
        }
        const last = points[points.length - 1];
        ctx.quadraticCurveTo(points[points.length - 1].x, points[points.length - 1].y, last.x, last.y);
    }
    ctx.stroke();
}

// cache-bust 1759000003

// ========================================
// –ì–û–õ–û–°–û–í–û–ô –ß–ê–¢ - –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –ü–û –¢–ó
// ========================================

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞
function toggleVoiceRecording() {
    if (isRecording) {
        stopVoiceRecording();
    } else {
        startVoiceRecording();
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞
function startVoiceRecording() {
    if (isRecording) return;

    isRecording = true;

    // –û–±–Ω–æ–≤–ª—è–µ–º UI –¥–ª—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    const micBtn = document.querySelector('.voice-mic-btn');
    if (micBtn) {
        micBtn.classList.add('recording');
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    showUserVoiceMessage();

    // Haptic feedback
    if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.HapticFeedback) {
        window.Telegram.WebApp.HapticFeedback.impactOccurred('light');
    }

    console.log('Voice recording started...');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏
function stopVoiceRecording() {
    if (!isRecording) return;

    isRecording = false;

    // –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–ø–∏—Å–∏
    const micBtn = document.querySelector('.voice-mic-btn');
    if (micBtn) {
        micBtn.classList.remove('recording');
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram WebApp
    if (window.Telegram && window.Telegram.WebApp) {
        window.Telegram.WebApp.sendData(JSON.stringify({
            type: 'voice_message',
            action: 'send',
            timestamp: Date.now()
        }));
    }

    console.log('Voice recording stopped.');
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function showUserVoiceMessage() {
    const messagesContainer = document.querySelector('.voice-messages');
    const userMessage = document.querySelector('.user-message');

    if (messagesContainer && userMessage) {
        userMessage.style.display = 'flex';
        // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ Play/Pause –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
function toggleVoicePlayback(button) {
    const isPlaying = button.innerHTML.includes('rect');

    if (isPlaying) {
        // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ - –ø–æ–∫–∞–∑–∞—Ç—å –∏–∫–æ–Ω–∫—É Play
        button.innerHTML = `
            <svg width="14" height="14" viewBox="0 0 24 24" fill="none">
                <path d="M8 5V19L19 12L8 5Z" fill="currentColor"/>
            </svg>
        `;
        stopWaveAnimation(button);
    } else {
        // –ù–∞—á–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ - –ø–æ–∫–∞–∑–∞—Ç—å –∏–∫–æ–Ω–∫—É Pause
        button.innerHTML = `
            <svg width="14" height="14" viewBox="0 0 24 24" fill="none">
                <rect x="6" y="4" width="4" height="16" fill="currentColor"/>
                <rect x="14" y="4" width="4" height="16" fill="currentColor"/>
            </svg>
        `;
        startWaveAnimation(button);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã (–∏–º–∏—Ç–∞—Ü–∏—è)
        setTimeout(() => {
            if (button.innerHTML.includes('rect')) {
                button.innerHTML = `
                    <svg width="14" height="14" viewBox="0 0 24 24" fill="none">
                        <path d="M8 5V19L19 12L8 5Z" fill="currentColor"/>
                    </svg>
                `;
                stopWaveAnimation(button);
            }
        }, 3000);
    }

    // Haptic feedback
    if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.HapticFeedback) {
        window.Telegram.WebApp.HapticFeedback.impactOccurred('light');
    }
}

// –ê–Ω–∏–º–∞—Ü–∏—è –≤–æ–ª–Ω
function startWaveAnimation(button) {
    const waveform = button.nextElementSibling;
    if (waveform) {
        const waveBars = waveform.querySelectorAll('.wave-bar');
        waveBars.forEach((bar, index) => {
            bar.style.animationDelay = `${index * 0.1}s`;
            bar.style.animationPlayState = 'running';
        });
    }
}

function stopWaveAnimation(button) {
    const waveform = button.nextElementSibling;
    if (waveform) {
        const waveBars = waveform.querySelectorAll('.wave-bar');
        waveBars.forEach(bar => {
            bar.style.animationPlayState = 'paused';
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞
function initVoiceChatEvents() {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ play/pause
    document.querySelectorAll('.voice-play-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            toggleVoicePlayback(this);
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —á–∞—Ç—É)
    const keyboardBtn = document.querySelector('.voice-keyboard-btn');
    if (keyboardBtn) {
        keyboardBtn.addEventListener('click', function() {
            showScreen('chat-screen');
        });
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    initVoiceChatEvents();
});

// ========================================
// –ú–ï–î–ò–¢–ê–¶–ò–û–ù–ù–´–ô –ü–õ–ï–ï–† - –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨
// ========================================

let meditationTimer = null;
let meditationSeconds = 0;
let isPlaying = false;
let breathingCycle = 'inhale'; // 'inhale' –∏–ª–∏ 'exhale'
let breathingInterval = null;

// –ó–∞–ø—É—Å–∫ –º–µ–¥–∏—Ç–∞—Ü–∏–∏
function playMeditation() {
    showScreen('practice-player-screen');
    startMeditation();
}

// –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –ø—Ä–∞–∫—Ç–∏–∫
function showPractices() {
    showScreen('practices-screen');
    updateNavigation('practices-screen');
    stopMeditation();
}

// –ó–∞–ø—É—Å–∫ –º–µ–¥–∏—Ç–∞—Ü–∏–∏
function startMeditation() {
    meditationSeconds = 94; // 1:34 –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    isPlaying = true;

    // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º UI
    updateMeditationTimer();
    updatePlayPauseButton();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    initMeditationPlayer();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    startBreathingAnimation();

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
    meditationTimer = setInterval(() => {
        if (meditationSeconds > 0) {
            meditationSeconds--;
            updateMeditationTimer();
        } else {
            stopMeditation();
        }
    }, 1000);

    console.log('Meditation started, isPlaying:', isPlaying);
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏
function stopMeditation() {
    isPlaying = false;

    if (meditationTimer) {
        clearInterval(meditationTimer);
        meditationTimer = null;
    }

    stopBreathingAnimation();
    updatePlayPauseButton();

    console.log('Meditation stopped');
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ play/pause
function toggleMeditationPlayback() {
    console.log('Toggle clicked, current isPlaying:', isPlaying);
    if (isPlaying) {
        pauseMeditation();
    } else {
        resumeMeditation();
    }
}

function pauseMeditation() {
    console.log('Pausing meditation');
    isPlaying = false;

    if (meditationTimer) {
        clearInterval(meditationTimer);
        meditationTimer = null;
    }

    stopBreathingAnimation();
    updatePlayPauseButton();
    console.log('Meditation paused, isPlaying:', isPlaying);
}

function resumeMeditation() {
    console.log('Resuming meditation');
    isPlaying = true;
    startBreathingAnimation();
    updatePlayPauseButton();

    meditationTimer = setInterval(() => {
        if (meditationSeconds > 0) {
            meditationSeconds--;
            updateMeditationTimer();
        } else {
            stopMeditation();
        }
    }, 1000);
    console.log('Meditation resumed, isPlaying:', isPlaying);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
function updateMeditationTimer() {
    const minutes = Math.floor(meditationSeconds / 60);
    const seconds = meditationSeconds % 60;
    const timerText = `${minutes}:${seconds.toString().padStart(2, '0')}`;

    const timerElement = document.querySelector('.player-timer');
    if (timerElement) {
        timerElement.textContent = timerText;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ play/pause
function updatePlayPauseButton() {
    const pauseBtn = document.querySelector('.player-pause-btn');
    if (pauseBtn) {
        if (isPlaying) {
            pauseBtn.innerHTML = '‚è∏';
            console.log('Button set to pause (‚è∏)');
        } else {
            pauseBtn.innerHTML = '‚ñ∂';
            console.log('Button set to play (‚ñ∂)');
        }
    } else {
        console.log('Pause button not found for update');
    }
}

// –ê–Ω–∏–º–∞—Ü–∏—è –¥—ã—Ö–∞–Ω–∏—è
function startBreathingAnimation() {
    const orbElement = document.querySelector('.breathing-orb');
    const textElement = document.querySelector('.breathing-text');

    console.log('Starting breathing animation, orb found:', !!orbElement, 'text found:', !!textElement);

    if (!orbElement || !textElement) {
        console.log('Missing elements for breathing animation');
        return;
    }

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
    if (breathingInterval) {
        clearInterval(breathingInterval);
    }

    // –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –¥—ã—Ö–∞–Ω–∏—è –¥–ª—è —à–µ–π–¥–µ—Ä–∞
    function animateBreathing() {
        const cycleTime = 8000; // 8 —Å–µ–∫—É–Ω–¥ –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª
        const halfCycle = cycleTime / 2; // 4 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ —Ñ–∞–∑—É
        const startTime = Date.now();

        function updateBreathing() {
            if (!isPlaying) return;

            const elapsed = (Date.now() - startTime) % cycleTime;
            const phase = elapsed / halfCycle;

            if (phase < 1) {
                // –í–¥–æ—Ö (0 -> 1)
                breathingIntensity = 0.5 + 0.5 * Math.sin((phase * Math.PI) - Math.PI/2);
                if (textElement.textContent !== '–í–¥–æ—Ö') {
                    textElement.textContent = '–í–¥–æ—Ö';
                    console.log('Inhale phase');
                }
            } else {
                // –í—ã–¥–æ—Ö (1 -> 0)
                const exhalePhase = phase - 1;
                breathingIntensity = 1.0 - 0.5 * Math.sin((exhalePhase * Math.PI) - Math.PI/2);
                if (textElement.textContent !== '–í—ã–¥–æ—Ö') {
                    textElement.textContent = '–í—ã–¥–æ—Ö';
                    console.log('Exhale phase');
                }
            }

            requestAnimationFrame(updateBreathing);
        }

        updateBreathing();
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    animateBreathing();
}

function stopBreathingAnimation() {
    if (breathingInterval) {
        clearInterval(breathingInterval);
        breathingInterval = null;
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –¥—ã—Ö–∞–Ω–∏—è –¥–ª—è —à–µ–π–¥–µ—Ä–∞
    breathingIntensity = 1.0;

    const orbElement = document.querySelector('.breathing-orb');
    const textElement = document.querySelector('.breathing-text');

    if (orbElement) {
        orbElement.classList.remove('inhale', 'exhale');
    }

    if (textElement) {
        textElement.textContent = '–í–¥–æ—Ö';
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–¥–∏—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–ª–µ–µ—Ä–∞
function initMeditationPlayer() {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    const pauseBtn = document.querySelector('.player-pause-btn');
    if (pauseBtn) {
        pauseBtn.removeEventListener('click', toggleMeditationPlayback);
        pauseBtn.addEventListener('click', toggleMeditationPlayback);
        console.log('Play/pause button event listener attached');
    } else {
        console.log('Play/pause button not found');
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    updateMeditationTimer();
    updatePlayPauseButton();

    console.log('Meditation player initialized, isPlaying:', isPlaying);
}

// –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.playMeditation = playMeditation;
window.showPractices = showPractices;
window.toggleMeditationPlayback = toggleMeditationPlayback;

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–ª–µ–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    initVoiceChatEvents();
    initMeditationPlayer();
});

// ========================================
// WEBGL –®–ï–ô–î–ï–† –î–õ–Ø –î–´–•–ê–¢–ï–õ–¨–ù–û–ô –§–û–†–ú–´
// ========================================

let shaderGL = null;
let shaderProgram = null;
let startTime = performance.now();
let breathingIntensity = 1.0;

function initShaderOrb() {
    const canvas = document.getElementById('shaderCanvas');
    if (!canvas) return;

    const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
    if (!gl) {
        console.log('WebGL not supported, using CSS fallback');
        return;
    }

    shaderGL = gl;

    const vertexShaderSource = `
        attribute vec4 position;
        void main() {
            gl_Position = position;
        }
    `;

    const fragmentShaderSource = `
        precision mediump float;
        uniform float iTime;
        uniform vec2 iResolution;
        uniform float breathingPhase;

        #define T iTime
        #define r(v,t) { float a = (t)*T; float c=cos(a), s=sin(a); v = vec2(v.x*c-v.y*s, v.x*s+v.y*c); }

        float hash(float n) {
            return fract(sin(n)*43758.5453);
        }

        float noise(vec3 x) {
            vec3 p = floor(x);
            vec3 f = fract(x);
            f = f*f*(3.0-2.0*f);
            float n = p.x + p.y*57.0 + 113.0*p.z;
            return mix(mix(mix(hash(n+0.0), hash(n+1.0), f.x),
                          mix(hash(n+57.0), hash(n+58.0), f.x), f.y),
                      mix(mix(hash(n+113.0), hash(n+114.0), f.x),
                          mix(hash(n+170.0), hash(n+171.0), f.x), f.y), f.z);
        }

        float fbm(vec3 p) {
            float f = 0.0;
            f += 0.5000*noise(p); p = p*2.02;
            f += 0.2500*noise(p); p = p*2.03;
            f += 0.1250*noise(p); p = p*2.01;
            f += 0.0625*noise(p);
            return f;
        }

        vec3 sfbm3(vec3 p) {
            return vec3(fbm(p), fbm(p-327.67), fbm(p+327.67))*2.0-1.0;
        }

        void main() {
            vec2 uv = (gl_FragCoord.xy - 0.5*iResolution.xy) / iResolution.y;
            vec3 p = vec3(uv, 0.0);

            // –î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
            float breathScale = 1.0 + 0.3 * breathingPhase;
            p /= breathScale;

            // –í—Ä–µ–º—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
            float time = T * 0.5;

            // –°–æ–∑–¥–∞–µ–º –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫—É—é —Ñ–æ—Ä–º—É
            vec3 pos = p + vec3(0.0, 0.0, time);
            pos += sfbm3(pos*2.0 + vec3(time*0.3, 0.0, 0.0)) * 0.2;

            float dist = length(pos) - 0.4;
            dist += fbm(pos*4.0 + vec3(time*0.8, 0.0, 0.0)) * 0.1;

            // –ú—è–≥–∫–∏–µ –∫—Ä–∞—è
            float alpha = 1.0 - smoothstep(0.0, 0.2, dist);

            // –ü–∞—Å—Ç–µ–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏
            vec3 color1 = vec3(0.97, 0.90, 1.0);  // #f7e6ff
            vec3 color2 = vec3(0.81, 0.91, 1.0);  // #cfe9ff
            vec3 color3 = vec3(0.98, 0.84, 0.95); // #f9d7f1
            vec3 color4 = vec3(0.84, 0.83, 1.0);  // #d7d4ff

            // –ì—Ä–∞–¥–∏–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏
            float colorMix = (sin(time + pos.x*3.0)*0.5 + 0.5);
            colorMix += (cos(time*1.3 + pos.y*2.0)*0.3);
            colorMix = fract(colorMix);

            vec3 finalColor;
            if (colorMix < 0.33) {
                finalColor = mix(color1, color2, colorMix*3.0);
            } else if (colorMix < 0.66) {
                finalColor = mix(color2, color3, (colorMix-0.33)*3.0);
            } else {
                finalColor = mix(color3, color4, (colorMix-0.66)*3.0);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–ª–∏–≤—ã
            float iridescence = sin(time*2.0 + length(pos)*8.0)*0.3 + 0.7;
            finalColor *= iridescence;

            gl_FragColor = vec4(finalColor, alpha * 0.9);
        }
    `;

    function createShader(gl, type, source) {
        const shader = gl.createShader(type);
        gl.shaderSource(shader, source);
        gl.compileShader(shader);

        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            console.error('Shader compile error:', gl.getShaderInfoLog(shader));
            gl.deleteShader(shader);
            return null;
        }
        return shader;
    }

    const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);
    const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);

    shaderProgram = gl.createProgram();
    gl.attachShader(shaderProgram, vertexShader);
    gl.attachShader(shaderProgram, fragmentShader);
    gl.linkProgram(shaderProgram);

    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
        console.error('Program link error:', gl.getProgramInfoLog(shaderProgram));
        return;
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π quad
    const positions = new Float32Array([
        -1, -1,
         1, -1,
        -1,  1,
         1,  1
    ]);

    const positionBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, positions, gl.STATIC_DRAW);

    const positionLocation = gl.getAttribLocation(shaderProgram, 'position');
    const timeLocation = gl.getUniformLocation(shaderProgram, 'iTime');
    const resolutionLocation = gl.getUniformLocation(shaderProgram, 'iResolution');
    const breathingLocation = gl.getUniformLocation(shaderProgram, 'breathingPhase');

    function render() {
        if (!shaderGL || !shaderProgram) return;

        const currentTime = (performance.now() - startTime) / 1000.0;

        gl.viewport(0, 0, canvas.width, canvas.height);
        gl.clearColor(0, 0, 0, 0);
        gl.clear(gl.COLOR_BUFFER_BIT);

        gl.enable(gl.BLEND);
        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);

        gl.useProgram(shaderProgram);

        gl.enableVertexAttribArray(positionLocation);
        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
        gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

        gl.uniform1f(timeLocation, currentTime);
        gl.uniform2f(resolutionLocation, canvas.width, canvas.height);
        gl.uniform1f(breathingLocation, breathingIntensity);

        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);

        requestAnimationFrame(render);
    }

    render();
    console.log('Shader orb initialized successfully');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —à–µ–π–¥–µ—Ä –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏
const originalStartMeditation = startMeditation;
startMeditation = function() {
    originalStartMeditation();
    setTimeout(initShaderOrb, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ DOM
};

// ========================================
// –ò–°–¢–û–†–ò–Ø –ß–ê–¢–û–í - –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–°–°–ò–Ø–ú–ò
// ========================================

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —á–∞—Ç–æ–≤
let chatSessions = [
    { id: 1, title: '–ö–∞–∫ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º', date: new Date(), messages: [] },
    { id: 2, title: '–ü—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Ä–∞–±–æ—Ç–µ', date: new Date(), messages: [] },
    { id: 3, title: '–ü–æ—Å—Å–æ—Ä–∏–ª–∏—Å—å —Å –ø–∞—Ä–Ω–µ–º', date: new Date(Date.now() - 86400000), messages: [] }
];

let currentChatId = null;

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç
function createNewChat() {
    const newChat = {
        id: Date.now(),
        title: '–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥',
        date: new Date(),
        messages: []
    };
    chatSessions.unshift(newChat);
    currentChatId = newChat.id;

    // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ voice-messages
    const voiceMessages = document.querySelector('.voice-messages');
    if (voiceMessages) {
        voiceMessages.innerHTML = '';
    }

    // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ chat-messages
    const chatMessages = document.getElementById('chatMessages');
    if (chatMessages) {
        chatMessages.innerHTML = '';
    }

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —ç–∫—Ä–∞–Ω —á–∞—Ç–∞
    showScreen('voice-chat-screen');
    console.log('Created new chat:', newChat.id);
}

// –û—Ç–∫—Ä—ã—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç
function openChat(chatId) {
    currentChatId = chatId;
    const chat = chatSessions.find(c => c.id === chatId);
    
    if (chat) {
        console.log('Opening chat:', chat.title);
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
        loadChatMessages(chat);
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —ç–∫—Ä–∞–Ω —á–∞—Ç–∞
        showScreen('voice-chat-screen');
    }
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
function loadChatMessages(chat) {
    const chatContent = document.querySelector('.chat-content');
    if (!chatContent) return;
    
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    chatContent.innerHTML = '';
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    chat.messages.forEach(msg => {
        addChatMessage(msg.text, msg.type);
    });
    
    console.log(`Loaded ${chat.messages.length} messages for chat ${chat.id}`);
}

// –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
function startVoiceInput() {
    console.log('Starting voice input from history screen');
    createNewChat();
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω
}

// –û–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
function updateChatHistory() {
    const historyContent = document.querySelector('.history-content');
    if (!historyContent) return;
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —á–∞—Ç—ã –ø–æ –¥–∞—Ç–∞–º
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    
    const todayChats = chatSessions.filter(chat => {
        const chatDate = new Date(chat.date);
        chatDate.setHours(0, 0, 0, 0);
        return chatDate.getTime() === today.getTime();
    });
    
    const yesterdayChats = chatSessions.filter(chat => {
        const chatDate = new Date(chat.date);
        chatDate.setHours(0, 0, 0, 0);
        return chatDate.getTime() === yesterday.getTime();
    });
    
    const olderChats = chatSessions.filter(chat => {
        const chatDate = new Date(chat.date);
        chatDate.setHours(0, 0, 0, 0);
        return chatDate.getTime() < yesterday.getTime();
    });
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    historyContent.innerHTML = '';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É "–°–µ–≥–æ–¥–Ω—è"
    if (todayChats.length > 0) {
        const todayGroup = document.createElement('div');
        todayGroup.className = 'history-group';
        todayGroup.innerHTML = '<h4 class="history-date">–°–µ–≥–æ–¥–Ω—è</h4>';
        
        todayChats.forEach(chat => {
            const item = document.createElement('div');
            item.className = 'history-item';
            item.textContent = chat.title;
            item.onclick = () => openChat(chat.id);
            todayGroup.appendChild(item);
        });
        
        historyContent.appendChild(todayGroup);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É "–í—á–µ—Ä–∞"
    if (yesterdayChats.length > 0) {
        const yesterdayGroup = document.createElement('div');
        yesterdayGroup.className = 'history-group';
        yesterdayGroup.innerHTML = '<h4 class="history-date">–í—á–µ—Ä–∞</h4>';
        
        yesterdayChats.forEach(chat => {
            const item = document.createElement('div');
            item.className = 'history-item';
            item.textContent = chat.title;
            item.onclick = () => openChat(chat.id);
            yesterdayGroup.appendChild(item);
        });
        
        historyContent.appendChild(yesterdayGroup);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É "–†–∞–Ω—å—à–µ"
    if (olderChats.length > 0) {
        const olderGroup = document.createElement('div');
        olderGroup.className = 'history-group';
        olderGroup.innerHTML = '<h4 class="history-date">–†–∞–Ω—å—à–µ</h4>';
        
        olderChats.forEach(chat => {
            const item = document.createElement('div');
            item.className = 'history-item';
            item.textContent = chat.title;
            item.onclick = () => openChat(chat.id);
            olderGroup.appendChild(item);
        });
        
        historyContent.appendChild(olderGroup);
    }
    
    console.log('Chat history updated');
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
function saveChatMessage(text, type) {
    if (!currentChatId) {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
        createNewChat();
    }
    
    const chat = chatSessions.find(c => c.id === currentChatId);
    if (chat) {
        chat.messages.push({ text, type, timestamp: new Date() });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (chat.title === '–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥' && type === 'user' && chat.messages.length === 1) {
            chat.title = text.substring(0, 50);
            updateChatHistory();
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    updateChatHistory();
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.createNewChat = createNewChat;
window.openChat = openChat;
window.startVoiceInput = startVoiceInput;

// –í–µ—Ä–Ω—É—Ç—å—Å—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫—Ä–∞–Ω
function goBackFromHistory() {
    if (previousScreen && previousScreen !== 'chat-history-screen') {
        showScreen(previousScreen);
    } else {
        showScreen('voice-chat-screen');
    }
    previousScreen = null;
}

window.goBackFromHistory = goBackFromHistory;

// ===== ANALYSIS SCREENS =====

function showAnalysis() {
    showScreen('analysis-screen');
}

function startAnalysis(topic) {
    currentAnalysisTopic = topic;
    const topicData = analysisTopics[topic];

    // Set assistant type based on topic
    currentAssistantType = topic; // 'relationships', 'money', 'confidence', 'fears'

    // Update title for both screens
    const chatTitleEl = document.getElementById('analysisTopicTitle');
    if (chatTitleEl) {
        chatTitleEl.textContent = topicData.title;
    }
    const voiceTitleEl = document.getElementById('analysisVoiceTitle');
    if (voiceTitleEl) {
        voiceTitleEl.textContent = topicData.title;
    }

    // Clear previous messages
    const messagesContainer = document.getElementById('analysisChatMessages');
    if (messagesContainer) {
        messagesContainer.innerHTML = '';
    }
    const voiceMessagesContainer = document.getElementById('analysisVoiceMessages');
    if (voiceMessagesContainer) {
        voiceMessagesContainer.innerHTML = '';
    }

    // Show voice screen first (like Soul Near GPT)
    showScreen('analysis-voice-screen');
}

async function sendAnalysisMessage() {
    const input = document.getElementById('analysisInput');
    const message = input.value.trim();

    if (!message) return;

    // Add user message using addChatMessage with custom container
    const messagesContainer = document.getElementById('analysisChatMessages');
    addMessageToContainer(messagesContainer, message, 'user');

    // Clear input
    input.value = '';

    // Add typing indicator
    const typingIndicator = addMessageToContainer(messagesContainer, '–ü–µ—á–∞—Ç–∞–µ—Ç...', 'assistant');
    typingIndicator.classList.add('typing-indicator');

    try {
        // Get user ID
        let userId = 'anonymous';
        if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe) {
            const user = window.Telegram.WebApp.initDataUnsafe.user;
            if (user && user.id) {
                userId = user.id;
            }
        }

        // Send to API
        const response = await fetch('/api/chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                user_id: userId,
                message: message,
                assistant_type: currentAssistantType
            })
        });

        // Remove typing indicator
        typingIndicator.remove();

        if (response.ok) {
            const data = await response.json();
            addMessageToContainer(messagesContainer, data.response, 'assistant');
        } else {
            addMessageToContainer(messagesContainer, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'assistant');
        }
    } catch (error) {
        console.error('Error sending analysis message:', error);
        typingIndicator.remove();
        addMessageToContainer(messagesContainer, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.', 'assistant');
    }
}

// Helper function to add messages to any container
function addMessageToContainer(container, message, type) {
    if (!container) return null;

    const messageElement = document.createElement('div');
    messageElement.className = `message ${type}`;

    const contentElement = document.createElement('div');
    contentElement.className = 'message-content';

    if (type === 'assistant' && message.includes('\n')) {
        const paragraphs = message.split('\n').filter(p => p.trim());
        paragraphs.forEach(paragraph => {
            const p = document.createElement('p');
            p.textContent = paragraph;
            contentElement.appendChild(p);
        });
    } else {
        const p = document.createElement('p');
        p.textContent = message;
        contentElement.appendChild(p);
    }

    messageElement.appendChild(contentElement);
    container.appendChild(messageElement);
    container.scrollTop = container.scrollHeight;

    return messageElement;
}

function switchToAnalysisVoice() {
    showScreen('analysis-voice-screen');
}

function toggleAnalysisVoiceRecording() {
    isRecording = !isRecording;
    const btn = document.querySelector('#analysis-voice-screen .voice-mic-btn');

    if (isRecording) {
        btn.style.background = '#EF5350';
        // TODO: Start recording
    } else {
        btn.style.background = '#4A90E2';
        // TODO: Stop recording and send
    }
}

// ===== DREAMS SCREENS =====
function showDreams() {
    showScreen('dreams-screen');
}

function startDreamsChat() {
    showScreen('dreams-chat-screen');
}

function startDreamsVoice() {
    showScreen('dreams-voice-screen');
}

async function sendDreamsMessage() {
    const input = document.getElementById('dreamsInput');
    const message = input.value.trim();

    if (!message) return;

    // Add user message
    const messagesContainer = document.getElementById('dreamsChatMessages');
    addMessageToContainer(messagesContainer, message, 'user');

    // Clear input
    input.value = '';

    // Add typing indicator
    const typingIndicator = addMessageToContainer(messagesContainer, '–ü–µ—á–∞—Ç–∞–µ—Ç...', 'assistant');
    typingIndicator.classList.add('typing-indicator');

    try {
        // Get user ID
        let userId = 'anonymous';
        if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe) {
            const user = window.Telegram.WebApp.initDataUnsafe.user;
            if (user && user.id) {
                userId = user.id;
            }
        }

        // Send to API
        const response = await fetch('/api/chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                user_id: userId,
                message: message,
                assistant_type: 'sleeper'
            })
        });

        // Remove typing indicator
        typingIndicator.remove();

        if (response.ok) {
            const data = await response.json();
            addMessageToContainer(messagesContainer, data.response, 'assistant');
        } else {
            addMessageToContainer(messagesContainer, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'assistant');
        }
    } catch (error) {
        console.error('Error sending dreams message:', error);
        typingIndicator.remove();
        addMessageToContainer(messagesContainer, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.', 'assistant');
    }
}

// Remove old mock code
function startDreamsChat() {
    showScreen('dreams-chat-screen');
    // Clear previous messages
    const messagesContainer = document.getElementById('dreamsChatMessages');
    if (messagesContainer) {
        messagesContainer.innerHTML = '';
    }
}

function startDreamsVoice() {
    showScreen('dreams-voice-screen');
}

// Skip old mock simulation below
if (false) {
    setTimeout(() => {
        const aiMsg = document.createElement('div');
        aiMsg.className = 'dreams-message assistant';
        aiMsg.innerHTML = `<div class="message-content">–≠—Ç–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Å–æ–Ω. –ü–æ–∑–≤–æ–ª—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –µ–≥–æ —Å–∏–º–≤–æ–ª–∏–∫—É...</div>`;
        messagesContainer.appendChild(aiMsg);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }, 1000);
}

function switchToDreamsVoice() {
    showScreen('dreams-voice-screen');
}

function toggleDreamsVoiceRecording() {
    isRecording = !isRecording;
    const btn = document.querySelector('#dreams-voice-screen .voice-mic-btn');

    if (isRecording) {
        btn.style.background = '#EF5350';
        // TODO: Start recording
    } else {
        btn.style.background = '#7E57C2';
        // TODO: Stop recording and send
    }
}

// ===== AGENT SELECTION =====
function selectAgent(agentType) {
    switch(agentType) {
        case 'general':
            // –û–±—ã—á–Ω—ã–π —á–∞—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π —ç–∫—Ä–∞–Ω
            currentAssistantType = 'helper';
            showScreen('general-voice-screen');
            break;
        case 'analysis':
            // –ê–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            showScreen('analysis-screen');
            break;
        case 'dreams':
            // –°–Ω—ã - —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π —ç–∫—Ä–∞–Ω
            currentAssistantType = 'sleeper';
            showScreen('dreams-voice-screen');
            break;
    }
}

function toggleGeneralVoiceRecording() {
    isRecording = !isRecording;
    const btn = document.querySelector('#general-voice-screen .voice-mic-btn');

    if (isRecording) {
        btn.style.background = '#EF5350';
        // TODO: Start recording
    } else {
        btn.style.background = '#4A90E2';
        // TODO: Stop recording and send
    }
}

// Export new functions to window
window.selectAgent = selectAgent;
window.toggleGeneralVoiceRecording = toggleGeneralVoiceRecording;

window.showAnalysis = showAnalysis;
window.startAnalysis = startAnalysis;
window.sendAnalysisMessage = sendAnalysisMessage;
window.switchToAnalysisVoice = switchToAnalysisVoice;
window.toggleAnalysisVoiceRecording = toggleAnalysisVoiceRecording;

window.showDreams = showDreams;
window.startDreamsChat = startDreamsChat;
window.startDreamsVoice = startDreamsVoice;
window.sendDreamsMessage = sendDreamsMessage;
window.switchToDreamsVoice = switchToDreamsVoice;
window.toggleDreamsVoiceRecording = toggleDreamsVoiceRecording;
