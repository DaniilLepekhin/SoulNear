// Telegram WebApp API
let tg = window.Telegram.WebApp;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentUser = null;
let selectedMood = null;
let currentDate = new Date();
let userData = {
    moods: [],
    messages: [],
    practices: [],
    activities: []
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
    tg.ready();
    tg.expand();
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    currentUser = tg.initDataUnsafe?.user;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
    if (tg.colorScheme === 'dark') {
        document.body.classList.add('dark-theme');
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    initializeUserData();
    updateDailyStats();
    generateCalendar();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners();
    
    console.log('SoulNear WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤ —á–∞—Ç–µ
    const chatInput = document.getElementById('chat-input');
    if (chatInput) {
        chatInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Å—è—Ü–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
    window.changeMonth = changeMonth;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function initializeUserData() {
    if (currentUser) {
        document.getElementById('user-name').textContent = currentUser.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        document.getElementById('user-id').textContent = `ID: ${currentUser.id}`;
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    loadUserData();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function loadUserData() {
    const savedData = localStorage.getItem('soulNearData');
    if (savedData) {
        userData = JSON.parse(savedData);
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    updateProfileStats();
    updateRecentActivities();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function saveUserData() {
    localStorage.setItem('soulNearData', JSON.stringify(userData));
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–æ—Ç
    sendDataToBot('data_sync', userData);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram –±–æ—Ç
function sendDataToBot(action, data) {
    const payload = {
        action: action,
        user_id: currentUser?.id || 'unknown',
        data: data,
        timestamp: new Date().toISOString()
    };
    
    tg.sendData(JSON.stringify(payload));
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
function showScreen(screenId) {
    // –°–∫—Ä—ã—Ç—å –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
    const targetScreen = document.getElementById(screenId);
    if (targetScreen) {
        targetScreen.classList.add('active');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
function showMainScreen() {
    showScreen('main-screen');
    updateDailyStats();
}

// –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
function openMoodTracker() {
    showScreen('mood-screen');
}

// –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω —á–∞—Ç–∞
function openChat() {
    showScreen('chat-screen');
}

// –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫
function openBreathing() {
    showScreen('breathing-screen');
}

// –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function openCalendar() {
    showScreen('calendar-screen');
    generateCalendar();
}

// –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –ø—Ä–æ—Ñ–∏–ª—è
function showProfile() {
    showScreen('profile-screen');
    updateProfileStats();
}

// –í—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
function selectMood(mood) {
    selectedMood = mood;
    
    // –£–±—Ä–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll('.mood-option').forEach(btn => {
        btn.classList.remove('selected');
    });
    
    // –í—ã–¥–µ–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
    document.querySelector(`[data-mood="${mood}"]`).classList.add('selected');
    
    // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    document.getElementById('save-mood-btn').disabled = false;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
function saveMood() {
    if (!selectedMood) return;
    
    const note = document.getElementById('mood-note').value;
    const moodData = {
        mood: selectedMood,
        note: note,
        date: new Date().toISOString(),
        timestamp: Date.now()
    };
    
    // –î–æ–±–∞–≤–∏—Ç—å –≤ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userData.moods.push(moodData);
    
    // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateDailyStats();
    updateProfileStats();
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    saveUserData();
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –±–æ—Ç
    sendDataToBot('set_mood', moodData);
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification('–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! üòä');
    
    // –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    setTimeout(() => {
        showMainScreen();
        resetMoodForm();
    }, 1500);
}

// –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
function resetMoodForm() {
    selectedMood = null;
    document.getElementById('mood-note').value = '';
    document.querySelectorAll('.mood-option').forEach(btn => {
        btn.classList.remove('selected');
    });
    document.getElementById('save-mood-btn').disabled = true;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
function sendMessage() {
    const input = document.getElementById('chat-input');
    const message = input.value.trim();
    
    if (!message) return;
    
    // –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    addChatMessage(message, 'user');
    
    // –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞
    input.value = '';
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    const messageData = {
        text: message,
        date: new Date().toISOString(),
        timestamp: Date.now()
    };
    
    userData.messages.push(messageData);
    saveUserData();
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –±–æ—Ç
    sendDataToBot('send_message', messageData);
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    showTypingIndicator();
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞)
    setTimeout(() => {
        hideTypingIndicator();
        const aiResponse = generateAIResponse(message);
        addChatMessage(aiResponse, 'ai');
    }, 2000);
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
function addChatMessage(text, sender) {
    const messagesContainer = document.getElementById('chat-messages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}-message`;
    
    const avatar = sender === 'ai' ? 'ü§ñ' : 'üë§';
    
    messageDiv.innerHTML = `
        <div class="message-avatar">${avatar}</div>
        <div class="message-content">${text}</div>
    `;
    
    messagesContainer.appendChild(messageDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
function showTypingIndicator() {
    const messagesContainer = document.getElementById('chat-messages');
    const typingDiv = document.createElement('div');
    typingDiv.className = 'message ai-message typing-indicator';
    typingDiv.id = 'typing-indicator';
    
    typingDiv.innerHTML = `
        <div class="message-avatar">ü§ñ</div>
        <div class="message-content">
            <div class="typing-dots">
                <span></span><span></span><span></span>
            </div>
        </div>
    `;
    
    messagesContainer.appendChild(typingDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

// –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
function hideTypingIndicator() {
    const typingIndicator = document.getElementById('typing-indicator');
    if (typingIndicator) {
        typingIndicator.remove();
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò (–∑–∞–≥–ª—É—à–∫–∞)
function generateAIResponse(userMessage) {
    const responses = [
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ –æ–± —ç—Ç–æ–º.",
        "–ü–æ–Ω–∏–º–∞—é —Ç–µ–±—è. –ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–π—á–∞—Å?",
        "–≠—Ç–æ –≤–∞–∂–Ω–∞—è —Ç–µ–º–∞. –ß—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º?",
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å.",
        "–ö–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–≤–æ—é –∂–∏–∑–Ω—å?",
        "–¢—ã –º–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å –æ–± —ç—Ç–æ–º –æ—Ç–∫—Ä—ã—Ç–æ.",
        "–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç–æ –≤–º–µ—Å—Ç–µ.",
        "–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –∏–∑–º–µ–Ω–∏—Ç—å –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?"
    ];
    
    return responses[Math.floor(Math.random() * responses.length)];
}

// –ù–∞—á–∞–ª–æ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏
function startBreathing(type) {
    const practiceData = {
        type: type,
        startTime: new Date().toISOString(),
        timestamp: Date.now()
    };
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É
    userData.practices.push(practiceData);
    saveUserData();
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –±–æ—Ç
    sendDataToBot('breathing_started', practiceData);
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification('–î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å! ü´Å');
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        completeBreathingPractice(type);
    }, 30000);
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏
function completeBreathingPractice(type) {
    const practiceData = {
        type: type,
        duration: 30,
        completed: true,
        endTime: new Date().toISOString(),
        timestamp: Date.now()
    };
    
    // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—Ä–∞–∫—Ç–∏–∫—É
    const lastPractice = userData.practices[userData.practices.length - 1];
    if (lastPractice) {
        Object.assign(lastPractice, practiceData);
    }
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    saveUserData();
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –±–æ—Ç
    sendDataToBot('breathing_completed', practiceData);
    
    // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateDailyStats();
    updateProfileStats();
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification('–ü—Ä–∞–∫—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéØ');
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function generateCalendar() {
    const calendarGrid = document.getElementById('calendar-grid');
    if (!calendarGrid) return;
    
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
    document.getElementById('current-month').textContent = 
        currentDate.toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' });
    
    // –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const daysInMonth = lastDay.getDate();
    const startingDayOfWeek = firstDay.getDay();
    
    // –°–æ–∑–¥–∞—Ç—å —Å–µ—Ç–∫—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    let calendarHTML = '<div class="calendar-weekdays">';
    const weekdays = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
    weekdays.forEach(day => {
        calendarHTML += `<div class="weekday">${day}</div>`;
    });
    calendarHTML += '</div><div class="calendar-days">';
    
    // –ü—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞
    for (let i = 0; i < startingDayOfWeek; i++) {
        calendarHTML += '<div class="calendar-day empty"></div>';
    }
    
    // –î–Ω–∏ –º–µ—Å—è—Ü–∞
    for (let day = 1; day <= daysInMonth; day++) {
        const isToday = day === new Date().getDate() && month === new Date().getMonth();
        const hasMood = hasMoodForDay(day, month, year);
        const hasPractice = hasPracticeForDay(day, month, year);
        
        let dayClass = 'calendar-day';
        if (isToday) dayClass += ' today';
        if (hasMood) dayClass += ' has-mood';
        if (hasPractice) dayClass += ' has-practice';
        
        calendarHTML += `<div class="${dayClass}" onclick="selectDay(${day})">${day}</div>`;
    }
    
    calendarHTML += '</div>';
    calendarGrid.innerHTML = calendarHTML;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–ª—è –¥–Ω—è
function hasMoodForDay(day, month, year) {
    return userData.moods.some(mood => {
        const moodDate = new Date(mood.date);
        return moodDate.getDate() === day && 
               moodDate.getMonth() === month && 
               moodDate.getFullYear() === year;
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è –¥–Ω—è
function hasPracticeForDay(day, month, year) {
    return userData.practices.some(practice => {
        const practiceDate = new Date(practice.startTime);
        return practiceDate.getDate() === day && 
               practiceDate.getMonth() === month && 
               practiceDate.getFullYear() === year;
    });
}

// –í—ã–±–æ—Ä –¥–Ω—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
function selectDay(day) {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏–π –¥–Ω—è
    showNotification(`–í—ã–±—Ä–∞–Ω ${day} ${currentDate.toLocaleDateString('ru-RU', { month: 'long' })}`);
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
function changeMonth(direction) {
    currentDate.setMonth(currentDate.getMonth() + direction);
    generateCalendar();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–Ω—è
function updateDailyStats() {
    const today = new Date().toDateString();
    
    // –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
    const todayMood = userData.moods.find(mood => 
        new Date(mood.date).toDateString() === today
    );
    
    if (todayMood) {
        const moodEmojis = {
            excellent: 'üòç',
            good: 'üòä',
            okay: 'üòê',
            bad: 'üòî',
            terrible: 'üò¢'
        };
        document.getElementById('mood-today').textContent = moodEmojis[todayMood.mood] || 'üòä';
    } else {
        document.getElementById('mood-today').textContent = 'üòä';
    }
    
    // –°–æ–æ–±—â–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è
    const todayMessages = userData.messages.filter(msg => 
        new Date(msg.date).toDateString() === today
    );
    document.getElementById('messages-today').textContent = todayMessages.length;
    
    // –ü—Ä–∞–∫—Ç–∏–∫–∏ —Å–µ–≥–æ–¥–Ω—è
    const todayPractices = userData.practices.filter(practice => 
        new Date(practice.startTime).toDateString() === today
    );
    document.getElementById('practices-today').textContent = todayPractices.length;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
function updateProfileStats() {
    // –î–Ω–µ–π —Å –Ω–∞–º–∏
    const firstMood = userData.moods[0];
    const daysWithUs = firstMood ? 
        Math.floor((Date.now() - new Date(firstMood.date).getTime()) / (1000 * 60 * 60 * 24)) : 0;
    document.getElementById('total-days').textContent = daysWithUs;
    
    // –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    document.getElementById('total-moods').textContent = userData.moods.length;
    
    // –í—Å–µ–≥–æ –ø—Ä–∞–∫—Ç–∏–∫
    document.getElementById('total-practices').textContent = userData.practices.length;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
function updateRecentActivities() {
    const activityList = document.getElementById('activity-list');
    if (!activityList) return;
    
    // –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const allActivities = [
        ...userData.moods.map(mood => ({
            type: 'mood',
            text: `–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${mood.mood}`,
            time: mood.timestamp
        })),
        ...userData.messages.map(msg => ({
            type: 'message',
            text: `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`,
            time: msg.timestamp
        })),
        ...userData.practices.map(practice => ({
            type: 'practice',
            text: `–ü—Ä–∞–∫—Ç–∏–∫–∞: ${practice.type}`,
            time: practice.timestamp
        }))
    ];
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    allActivities.sort((a, b) => b.time - a.time);
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
    const recentActivities = allActivities.slice(0, 5);
    
    let activitiesHTML = '';
    recentActivities.forEach(activity => {
        const icon = {
            mood: 'üòä',
            message: 'üí¨',
            practice: 'ü´Å'
        }[activity.type] || 'üéØ';
        
        const timeAgo = getTimeAgo(activity.time);
        
        activitiesHTML += `
            <div class="activity-item">
                <div class="activity-icon">${icon}</div>
                <div class="activity-text">
                    <div class="activity-title">${activity.text}</div>
                    <div class="activity-time">${timeAgo}</div>
                </div>
            </div>
        `;
    });
    
    if (activitiesHTML === '') {
        activitiesHTML = `
            <div class="activity-item">
                <div class="activity-icon">üéØ</div>
                <div class="activity-text">
                    <div class="activity-title">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</div>
                    <div class="activity-time">–¢–æ–ª—å–∫–æ —á—Ç–æ</div>
                </div>
            </div>
        `;
    }
    
    activityList.innerHTML = activitiesHTML;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ "–Ω–∞–∑–∞–¥"
function getTimeAgo(timestamp) {
    const now = Date.now();
    const diff = now - timestamp;
    
    const minutes = Math.floor(diff / (1000 * 60));
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    
    if (minutes < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    if (minutes < 60) return `${minutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    if (hours < 24) return `${hours} —á –Ω–∞–∑–∞–¥`;
    return `${days} –¥–Ω –Ω–∞–∑–∞–¥`;
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showNotification(message) {
    // –°–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notification = document.createElement('div');
    notification.className = 'notification';
    notification.textContent = message;
    
    // –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–ª–∏
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(255, 107, 107, 0.9);
        color: white;
        padding: 12px 20px;
        border-radius: 25px;
        font-size: 14px;
        font-weight: 500;
        z-index: 1000;
        backdrop-filter: blur(10px);
        animation: slideDown 0.3s ease;
    `;
    
    // –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é
    const style = document.createElement('style');
    style.textContent = `
        @keyframes slideDown {
            from { transform: translateX(-50%) translateY(-100%); opacity: 0; }
            to { transform: translateX(-50%) translateY(0); opacity: 1; }
        }
    `;
    document.head.appendChild(style);
    
    // –î–æ–±–∞–≤–∏—Ç—å –≤ DOM
    document.body.appendChild(notification);
    
    // –£–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.remove();
        style.remove();
    }, 3000);
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
function exportData() {
    const dataStr = JSON.stringify(userData, null, 2);
    const dataBlob = new Blob([dataStr], {type: 'application/json'});
    
    const link = document.createElement('a');
    link.href = URL.createObjectURL(dataBlob);
    link.download = `soulNear_data_${new Date().toISOString().split('T')[0]}.json`;
    link.click();
    
    showNotification('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã! üì§');
}

// –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
function showSettings() {
    showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ‚öôÔ∏è');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram WebApp
tg.onEvent('mainButtonClicked', function() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    console.log('Main button clicked');
});

tg.onEvent('backButtonClicked', function() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    showMainScreen();
});

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ
function showBackButton() {
    tg.BackButton.show();
}

// –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
function hideBackButton() {
    tg.BackButton.hide();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
console.log('SoulNear WebApp –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');


