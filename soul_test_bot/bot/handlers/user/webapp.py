from aiogram import F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo

from bot.loader import dp
import database.repository.user as db_user


@dp.message(Command('webapp'))
async def webapp_command(message: Message):
    """Handler for /webapp command - opens SoulNear WebApp"""
    user_id = message.from_user.id

    # Create WebApp button
    webapp_url = "https://soulnear.daniillepekhin.com"  # URL where webapp will be hosted

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üßò –û—Ç–∫—Ä—ã—Ç—å SoulNear App",
                    web_app=WebAppInfo(url=webapp_url)
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ WebApp?",
                    callback_data="webapp_info"
                )
            ]
        ]
    )

    webapp_text = """
üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SoulNear WebApp!</b>

–û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä—è–º–æ –≤ Telegram:

üè† <b>–ì–ª–∞–≤–Ω–∞—è</b> - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
üé§ <b>–ì–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</b> - –æ–±—â–∞–π—Ç–µ—Å—å —Å Soul Near
üßò <b>–ü—Ä–∞–∫—Ç–∏–∫–∏</b> - –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b> - –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

<i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</i>
    """

    await message.answer(
        text=webapp_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

    # Update user activity
    await db_user.update_active(user_id=user_id)


@dp.callback_query(F.data == 'webapp_info')
async def webapp_info_callback(callback):
    """Provide information about WebApp functionality"""

    info_text = """
‚ùì <b>–ß—Ç–æ —Ç–∞–∫–æ–µ Telegram WebApp?</b>

WebApp - —ç—Ç–æ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–Ω—É—Ç—Ä–∏ Telegram:

‚úÖ <b>–£–¥–æ–±—Å—Ç–≤–æ</b> - –Ω–µ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚úÖ <b>–ë—ã—Å—Ç—Ä–æ—Ç–∞</b> - –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
‚úÖ <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</b> - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã Telegram
‚úÖ <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è</b> - —Ä–∞–±–æ—Ç–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º

<b>–í SoulNear WebApp –¥–æ—Å—Ç—É–ø–Ω–æ:</b>
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
‚Ä¢ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–π –∏ –ø—Ä–∞–∫—Ç–∏–∫
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π

<i>–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–∫—Ä—ã—Ç—å SoulNear App" –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å!</i>
    """

    await callback.answer()
    await callback.message.edit_text(
        text=info_text,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üßò –û—Ç–∫—Ä—ã—Ç—å SoulNear App",
                        web_app=WebAppInfo(url="https://soulnear.daniillepekhin.com")
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                        callback_data="webapp_back"
                    )
                ]
            ]
        ),
        parse_mode="HTML"
    )


@dp.callback_query(F.data == 'webapp_back')
async def webapp_back_callback(callback):
    """Go back to main webapp message"""

    webapp_text = """
üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SoulNear WebApp!</b>

–û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä—è–º–æ –≤ Telegram:

üè† <b>–ì–ª–∞–≤–Ω–∞—è</b> - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
üé§ <b>–ì–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</b> - –æ–±—â–∞–π—Ç–µ—Å—å —Å Soul Near
üßò <b>–ü—Ä–∞–∫—Ç–∏–∫–∏</b> - –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b> - –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

<i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</i>
    """

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üßò –û—Ç–∫—Ä—ã—Ç—å SoulNear App",
                    web_app=WebAppInfo(url="https://soulnear.daniillepekhin.com")
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ WebApp?",
                    callback_data="webapp_info"
                )
            ]
        ]
    )

    await callback.answer()
    await callback.message.edit_text(
        text=webapp_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.message(lambda message: message.web_app_data is not None)
async def webapp_data_handler(message: Message):
    """Handle data from WebApp"""
    try:
        # Get data from WebApp
        web_app_data = message.web_app_data.data
        user_id = message.from_user.id

        # Parse JSON data
        import json
        data = json.loads(web_app_data)

        action = data.get("action")
        payload = data.get("data", {})
        timestamp = data.get("timestamp")

        if action == "mood_selected":
            mood = payload.get("mood", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            await message.answer(
                f"üòä <b>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!</b>\n\n"
                f"üí≠ –í—ã –≤—ã–±—Ä–∞–ª–∏: {mood}\n"
                f"üìÖ –í—Ä–µ–º—è: {timestamp}\n\n"
                f"‚ú® –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ SoulNear!",
                parse_mode="HTML"
            )
            
        elif action == "chat_message":
            user_message = payload.get("message", "")
            await message.answer(
                f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!</b>\n\n"
                f"üìù –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: \"{user_message}\"\n"
                f"ü§ñ Soul Near –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º!\n\n"
                f"üí° –û—Ç–≤–µ—Ç –±—É–¥–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.",
                parse_mode="HTML"
            )
            
        elif action == "voice_recording_started":
            await message.answer(
                f"üé§ <b>–ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å!</b>\n\n"
                f"üó£Ô∏è –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ —Å–ø–æ–∫–æ–π–Ω–æ\n"
                f"‚è±Ô∏è Soul Near –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–µ—Ç...",
                parse_mode="HTML"
            )
            
        elif action == "voice_recording_stopped":
            await message.answer(
                f"‚úÖ <b>–ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...\n"
                f"üí≠ –°–∫–æ—Ä–æ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!",
                parse_mode="HTML"
            )
            
        elif action == "dreams_analysis_opened":
            await message.answer(
                f"üåô <b>–ê–Ω–∞–ª–∏–∑ —Å–Ω–æ–≤</b>\n\n"
                f"‚ú® –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å–Ω–æ–≤ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!\n"
                f"üîÆ Soul Near –∏–∑—É—á–∞–µ—Ç –≤–∞—à–∏ —Å–Ω–æ–≤–∏–¥–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è.",
                parse_mode="HTML"
            )
            
        elif action == "personality_analysis_opened":
            await message.answer(
                f"üß† <b>–ê–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏</b>\n\n"
                f"üî¨ –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!\n"
                f"üìä Soul Near —Å–æ–∑–¥–∞—Å—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –≤–∞—à–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏.",
                parse_mode="HTML"
            )
            
        else:
            await message.answer(
                f"‚úÖ <b>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ WebApp!</b>\n\n"
                f"üéØ –î–µ–π—Å—Ç–≤–∏–µ: {action}\n"
                f"üìä –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è...\n"
                f"üöÄ SoulNear —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤–∞—Å!",
                parse_mode="HTML"
            )

        # Update user activity
        await db_user.update_active(user_id=user_id)

    except Exception as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            f"üîß –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n"
            f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n"
            f"üìù –ö–æ–¥ –æ—à–∏–±–∫–∏: {str(e)[:50]}...",
            parse_mode="HTML"
        )
