from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

import bot.keyboards.media as kb
from bot.functions.other import check_sub
from bot.loader import dp
import database.repository.media_category as db_media_category
import database.repository.media as db_media


@dp.callback_query(F.data.startswith('media_categories'))
async def media_categories_callback(call: CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await call.answer()

    category = call.data.split()[1]

    match category:
        case 'practices':
            text = ("üßòüèº –¢—ã –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∞–∫—Ç–∏–∫ <b>Soul Near</b>.\n\n"
                    "–ó–¥–µ—Å—å –Ω–µ –¥–∞—é—Ç —Å–æ–≤–µ—Ç–æ–≤ ‚Äî –∑–¥–µ—Å—å —Ç—ã <b>–≤—Å–ø–æ–º–∏–Ω–∞–µ—à—å —Å–µ–±—è</b>.\n\n"
                    "–í—ã–±–µ—Ä–∏, —Å —á–µ–º —Ç—ã —Ö–æ—á–µ—à—å –±—ã—Ç—å —Å–µ–≥–æ–¥–Ω—è:")

        case 'videos':
            text = ("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏–¥–µ–æ-–ø—Ä–∞–∫—Ç–∏–∫–∏, —Å –Ω–∏–º–∏ —Ç–µ–±—è –ø–æ–∑–Ω–∞–∫–æ–º—è—Ç –Ω–∞—à–∏ —É—á–∏—Ç–µ–ª—è. "
                    "–ó–∞—Ä—É—á–∏—Å—å –∏—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Å—è –≤ –ø—É—Ç—å –∫ –±–∞–ª–∞–Ω—Å—É —Ç–µ–ª–∞ –∏ –¥—É—à–∏.")

    categories = await db_media_category.get_all_by_type(category=category)
    await call.message.answer(text=text,
                              reply_markup=kb.categories_menu(categories=categories))


@dp.callback_query(F.data.startswith('media_category'))
async def media_category_callback(call: CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await call.answer()

    user_id = call.from_user.id

    if not await check_sub(user_id=user_id):
        return

    category_id = int(call.data.split()[1])
    category = await db_media_category.get(id=category_id)
    medias = await db_media.get_all_by_category(category_id=category_id)

    match category.media_type:
        case 'video':
            await call.message.answer_video(video=category.media_id,
                                            caption=category.text,
                                            reply_markup=kb.medias_menu(medias=medias,
                                                                        category=category.category),
                                            protect_content=True)
        case 'audio':
            await call.message.answer_audio(audio=category.media_id,
                                            caption=category.text,
                                            reply_markup=kb.medias_menu(medias=medias,
                                                                        category=category.category),
                                            protect_content=True)
        case 'photo':
            await call.message.answer_photo(photo=category.media_id,
                                            caption=category.text,
                                            reply_markup=kb.medias_menu(medias=medias,
                                                                        category=category.category),
                                            protect_content=True)
        case None:
            await call.message.answer(text=category.text,
                                      reply_markup=kb.medias_menu(medias=medias,
                                                                  category=category.category),
                                      protect_content=True)


@dp.callback_query(F.data.startswith('media_file'))
async def media_file_callback(call: CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await call.answer()

    media_id = int(call.data.split()[1])
    media = await db_media.get(id=media_id)

    match media.media_type:
        case 'video':
            await call.message.answer_video(video=media.media_id,
                                            caption=media.text,
                                            reply_markup=kb.media_menu(category_id=media.category_id),
                                            protect_content=True)
        case 'audio':
            await call.message.answer_audio(audio=media.media_id,
                                            caption=media.text,
                                            reply_markup=kb.media_menu(category_id=media.category_id),
                                            protect_content=True)
        case 'photo':
            await call.message.answer_photo(photo=media.media_id,
                                            caption=media.text,
                                            reply_markup=kb.media_menu(category_id=media.category_id),
                                            protect_content=True)
